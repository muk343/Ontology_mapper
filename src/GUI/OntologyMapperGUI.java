package GUI;

import Visualize.*;
import java.util.*;
import java.io.File;
import java.net.URI;
import javax.swing.JFileChooser;
import algos.*;
import utilities.TextAreaWriter;
import fr.inrialpes.exmo.align.impl.BasicAlignment;
import fr.inrialpes.exmo.align.impl.BasicParameters;
import fr.inrialpes.exmo.align.impl.eval.PRecEvaluator;
import fr.inrialpes.exmo.align.impl.method.StringDistAlignment;
import fr.inrialpes.exmo.align.impl.renderer.OWLAxiomsRendererVisitor;
import fr.inrialpes.exmo.align.parser.AlignmentParser;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.io.*;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.undo.UndoableEdit;
import org.semanticweb.owl.align.*;
import org.jgraph.JGraph;
import org.jgraph.graph.DefaultGraphCell;
import org.jgraph.graph.GraphConstants;
import org.jgrapht.ListenableGraph;
import org.jgrapht.ext.JGraphModelAdapter;
import org.jgrapht.graph.DefaultEdge;
import org.jgrapht.graph.ListenableDirectedGraph;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author N Hari Prasad
 */
public class OntologyMapperGUI extends javax.swing.JFrame {
    
    String path1, path2, path3;
    URI ontology1, ontology2, ontology3;
        JGraph jgraph2;
        ListenableGraph g2;
       
        ListenableGraph g3=new ListenableDirectedGraph( DefaultEdge.class );
        JGraphModelAdapter m_jgAdapter;
       JGraphModelAdapter m_jgAdapter2 = new JGraphModelAdapter( g3 );
          JGraph jgraph3 = new JGraph( m_jgAdapter2 );
         
         private static final Color     DEFAULT_BG_COLOR = Color.WHITE;
       int y=0;  
       int x=0;
       boolean flag=false;
       ArrayList<String> vertexList=new ArrayList<String>();
        public void createGraph()
        {
             g2 = new ListenableDirectedGraph( DefaultEdge.class );
         
          m_jgAdapter = new JGraphModelAdapter( g2 );
           jgraph2 = new JGraph( m_jgAdapter );
         
        // JGraphAdapterFrame.adjustDisplaySettings( jgraph2 );
          jgraph2.setPreferredSize( new Dimension(1400,700));
         

        Color  c        = DEFAULT_BG_COLOR;

        jgraph2.setBackground( c );
        InputVisualizationPanel.add(jgraph2);
       
    }
        
        
        
        
       
     
 


    /**
     * Creates new form OntologyMapperGUI
     */
    public OntologyMapperGUI() {
        initComponents();
        createGraph();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        InputButton = new javax.swing.JButton();
        AlignmentButton = new javax.swing.JButton();
        MergeButton = new javax.swing.JButton();
        mapperTabbedPane = new javax.swing.JTabbedPane();
        inputPanel = new javax.swing.JPanel();
        file2Label = new javax.swing.JLabel();
        file1Label = new javax.swing.JLabel();
        matchButton = new javax.swing.JButton();
        matcherComboBox = new javax.swing.JComboBox();
        file2TextField = new javax.swing.JTextField();
        file1TextField = new javax.swing.JTextField();
        matcherLabel = new javax.swing.JLabel();
        browse1Button = new javax.swing.JButton();
        matchedLabel = new javax.swing.JLabel();
        matchStatusLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        expectedOutputFileTextField = new javax.swing.JTextField();
        createInputVisualizationButton = new javax.swing.JButton();
        browse2Button = new javax.swing.JButton();
        browse3Button = new javax.swing.JButton();
        alignmentPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        alignmentTextArea = new javax.swing.JTextArea();
        saveAlignmentButton = new javax.swing.JButton();
        visualizationPanel = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        InputVisualizationPanel = new javax.swing.JPanel();
        AddVertex = new javax.swing.JButton();
        AddEdge = new javax.swing.JButton();
        RemoveVertex = new javax.swing.JButton();
        RemoveEdge = new javax.swing.JButton();
        evaluationPanel = new javax.swing.JPanel();
        infoLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        evaluationInfoTextArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        fileChooser.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                fileChooserHierarchyChanged(evt);
            }
        });

        InputButton.setText("Input");
        InputButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InputButtonMouseClicked(evt);
            }
        });
        InputButton.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                InputButtonComponentMoved(evt);
            }
        });
        InputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputButtonActionPerformed(evt);
            }
        });

        AlignmentButton.setText("Alignment");
        AlignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlignmentButtonActionPerformed(evt);
            }
        });

        MergeButton.setText("Merge");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OntologyMapper");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        mapperTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapperTabbedPaneMouseClicked(evt);
            }
        });

        file2Label.setText("File2");

        file1Label.setText("File1");

        matchButton.setText("Match");
        matchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchButtonActionPerformed(evt);
            }
        });

        matcherComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "StringEqual", "LevenshteinDistance", "LCS" }));
        matcherComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matcherComboBoxActionPerformed(evt);
            }
        });

        file2TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file2TextFieldActionPerformed(evt);
            }
        });

        file1TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file1TextFieldActionPerformed(evt);
            }
        });

        matcherLabel.setText("Matcher");

        browse1Button.setText("Browse");
        browse1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browse1ButtonActionPerformed(evt);
            }
        });

        matchedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        matchedLabel.setText("Choose the Files and the Matcher");

        jLabel2.setText("Expected Output File*");

        expectedOutputFileTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expectedOutputFileTextFieldActionPerformed(evt);
            }
        });

        createInputVisualizationButton.setText("Visualize Output");
        createInputVisualizationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createInputVisualizationButtonActionPerformed(evt);
            }
        });

        browse2Button.setText("Browse");
        browse2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browse2ButtonActionPerformed(evt);
            }
        });

        browse3Button.setText("Browse");
        browse3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browse3ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(file2Label)
                    .addComponent(matcherLabel)
                    .addComponent(jLabel2)
                    .addComponent(file1Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(createInputVisualizationButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(matchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(matchStatusLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addComponent(file1TextField, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browse1Button))
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(file2TextField, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                                    .addComponent(matcherComboBox, 0, 1078, Short.MAX_VALUE)
                                    .addComponent(expectedOutputFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(browse2Button)
                                    .addComponent(browse3Button))))
                        .addGap(23, 23, 23))))
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(matchedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 939, Short.MAX_VALUE))
        );

        inputPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {file1Label, file2Label, matcherLabel});

        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(matchedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(file1Label)
                    .addComponent(file1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse1Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(file2Label)
                    .addComponent(file2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse2Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matcherComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(matcherLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expectedOutputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(browse3Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createInputVisualizationButton)
                    .addComponent(matchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(matchStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(433, 433, 433))
        );

        mapperTabbedPane.addTab("Input", inputPanel);

        alignmentTextArea.setColumns(20);
        alignmentTextArea.setRows(5);
        jScrollPane1.setViewportView(alignmentTextArea);

        saveAlignmentButton.setText("Save as..");
        saveAlignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAlignmentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout alignmentPanelLayout = new javax.swing.GroupLayout(alignmentPanel);
        alignmentPanel.setLayout(alignmentPanelLayout);
        alignmentPanelLayout.setHorizontalGroup(
            alignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alignmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(alignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(alignmentPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveAlignmentButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1275, Short.MAX_VALUE))
                .addContainerGap())
        );
        alignmentPanelLayout.setVerticalGroup(
            alignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alignmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveAlignmentButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                .addContainerGap())
        );

        mapperTabbedPane.addTab("Alignment", alignmentPanel);

        InputVisualizationPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        AddVertex.setText("Add Vertex");
        AddVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddVertexActionPerformed(evt);
            }
        });
        InputVisualizationPanel.add(AddVertex);

        AddEdge.setText("Add Edge");
        AddEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddEdgeActionPerformed(evt);
            }
        });
        InputVisualizationPanel.add(AddEdge);

        RemoveVertex.setText("Remove Vertex");
        RemoveVertex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveVertexActionPerformed(evt);
            }
        });
        InputVisualizationPanel.add(RemoveVertex);

        RemoveEdge.setText("Remove Edge");
        RemoveEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveEdgeActionPerformed(evt);
            }
        });
        InputVisualizationPanel.add(RemoveEdge);

        jTabbedPane2.addTab("Input", InputVisualizationPanel);

        javax.swing.GroupLayout visualizationPanelLayout = new javax.swing.GroupLayout(visualizationPanel);
        visualizationPanel.setLayout(visualizationPanelLayout);
        visualizationPanelLayout.setHorizontalGroup(
            visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1295, Short.MAX_VALUE)
        );
        visualizationPanelLayout.setVerticalGroup(
            visualizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
        );

        mapperTabbedPane.addTab("Input Ontology", visualizationPanel);

        infoLabel.setText("Info");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel4.setText("Charts");

        evaluationInfoTextArea.setColumns(20);
        evaluationInfoTextArea.setRows(5);
        evaluationInfoTextArea.setText("Threshold:\n\nPrecision:\nRecall:\nF-Measure:");
        jScrollPane3.setViewportView(evaluationInfoTextArea);

        jButton1.setText("Save As");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout evaluationPanelLayout = new javax.swing.GroupLayout(evaluationPanel);
        evaluationPanel.setLayout(evaluationPanelLayout);
        evaluationPanelLayout.setHorizontalGroup(
            evaluationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(evaluationPanelLayout.createSequentialGroup()
                .addGroup(evaluationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(evaluationPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(evaluationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(evaluationPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                                .addGap(188, 188, 188))
                            .addGroup(evaluationPanelLayout.createSequentialGroup()
                                .addComponent(infoLabel)
                                .addGap(111, 111, 111))))
                    .addGroup(evaluationPanelLayout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(294, 294, 294))
        );
        evaluationPanelLayout.setVerticalGroup(
            evaluationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
            .addGroup(evaluationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(evaluationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(evaluationPanelLayout.createSequentialGroup()
                        .addComponent(infoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );

        mapperTabbedPane.addTab("Evaluation", evaluationPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapperTabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapperTabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileChooserHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_fileChooserHierarchyChanged
        // TODO add your handling code here:
   
    }//GEN-LAST:event_fileChooserHierarchyChanged

    private void expectedOutputFileTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expectedOutputFileTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expectedOutputFileTextFieldActionPerformed

    private void browse1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browse1ButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            file1TextField.setText(file.getName());
            path1 = file.getAbsolutePath();
            try{
                //replace this line based on OS - TODO
                // For Linux: ontology2 = URI.create("file://" + path2);
                ontology1 = new File (path1).toURI();
            }
            catch(Exception e){e.printStackTrace();}
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_browse1ButtonActionPerformed

    private void file1TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file1TextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_file1TextFieldActionPerformed

    private void file2TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file2TextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_file2TextFieldActionPerformed

    private void createMergeVisualizationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMergeVisualizationButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_createMergeVisualizationButtonActionPerformed

    private void saveAlignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAlignmentButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
      int value=fc.showSaveDialog(null);
      if(value==JFileChooser.APPROVE_OPTION)
      {
      try
      {
      String content=alignmentTextArea.getText();
      File outFile = fc.getSelectedFile();
      BufferedWriter out=new BufferedWriter(new FileWriter(outFile.toString()+".rdf"));
      out.write(content);
      out.close();
      
      
      }
      catch(Exception e){}
      }
    }//GEN-LAST:event_saveAlignmentButtonActionPerformed

   private void createInputVisualizationButtonActionPerformed(java.awt.event.ActionEvent evt){
       //mapperTabbedPane.setSelectedIndex(2);
       //jTabbedPane2.setSelectedIndex(0);
                    JGraphAdapterFrame jg=new JGraphAdapterFrame();
         
          
         
        // JGraphAdapterFrame.adjustDisplaySettings( jgraph2 );
          /*jgraph3.setPreferredSize( new Dimension(530,320));
         

        Color  c        = DEFAULT_BG_COLOR;

        jgraph3.setBackground( c );
        AlignmentPanel.add(jgraph3);
     MatchedObject obj=new MatchedObject();
        int y1=0;
        for(int m=0;m<Global.matchArr.size();m++)
        {   obj=Global.matchArr.get(m);
            g3.addVertex(obj.st1);
           
            g3.addVertex(obj.st2);
            g3.addEdge(obj.st1, obj.st2);
            positionVertexAt(obj.st1, 150, 60+y1);
            positionVertexAt(obj.st2,600,60+y1);
            y+=50;
        }*/

   }
   
    private void browse2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browse2ButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            file2TextField.setText(file.getName());
            path2 = file.getAbsolutePath();
            try{
                //replace this line based on OS - TODO
                // For Linux: ontology2 = URI.create("file://" + path2);
                ontology2 = new File (path2).toURI();
            }
            catch(Exception e){e.printStackTrace();}
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_browse2ButtonActionPerformed

    private void browse3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browse3ButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            expectedOutputFileTextField.setText(file.getName());
            path3 = file.getAbsolutePath();
            try{
                //replace this line based on OS - TODO
                // For Linux: ontology2 = URI.create("file://" + path2);
                ontology3 = new File (path3).toURI();
                //ontology3 = URI.create("file:/" + path3);
            }
            catch(Exception e){e.printStackTrace();}
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_browse3ButtonActionPerformed

    private void matchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchButtonActionPerformed
        matchStatusLabel.setText("Matching...");
        matchStatusLabel.setForeground(Color.yellow);
        alignmentTextArea.setText("");
        String res = "";
        String algo;
        Properties params  = new BasicParameters();
        algo = (String) matcherComboBox.getSelectedItem();
        AlignmentProcess a;
        if(algo.equals("StringEqual"))
            a = new algos.StringEquality();
        else if(algo.equals("LevenshteinDistance"))
        {
            a = new StringDistAlignment();
            params.setProperty("stringFunction", "levenshteinDistance");
        }
        else
            a = new algos.LCS();
        try {
            // Load the reference alignment 
            AlignmentParser aparser = new AlignmentParser(0); 
            Alignment result = null; 
            a.init(ontology1, ontology2);
            a.align((Alignment)null,params);
            PrintWriter alignmentWriter = new PrintWriter (new TextAreaWriter(alignmentTextArea));
            AlignmentVisitor renderer = new OWLAxiomsRendererVisitor(alignmentWriter);
            a.cut( ((double)2)/10 );
            result = (BasicAlignment)((BasicAlignment)a).clone();
            if(result==null) alignmentTextArea.setText("Nothing is matching!!!");
            result.render(renderer);
            /* TODO
            if(ontology1!=null && ontology2!=null)
            {
                PrintWriter mergeWriter = new PrintWriter (new TextAreaWriter(mergeTextArea));
            }
            */
            if(ontology3!=null)
            {
            Alignment reference = aparser.parse( ontology3 );
            // Trim at various thresholds 
            // Evaluate them against the references 
            // and choose the one with the best F-Measure 
            double best = 0; 
            result = null; 
            Properties p = new BasicParameters(); 
            for ( int i = 2; i <= 10 ; i += 2 )
            { 
                a.cut( ((double)i)/10 ); 
                // This operation must be repeated because the modifications in "a"
                // are not taken into account otherwise 
                Evaluator evaluator = new PRecEvaluator( reference, a ); 
                evaluator.eval( p ); 
                res+=("Threshold "+(((double)i)/10)+" : "+
                        "\nPrecision = "+
                        ((PRecEvaluator)evaluator).getPrecision()+
                        "\nRecall = "+
                        ((PRecEvaluator)evaluator).getRecall()+
                        "\nF-Measure = "+
                        ((PRecEvaluator)evaluator).getFmeasure()+
                        "\nover "+a.nbCells()+" cells\n\n");
                if ( ((PRecEvaluator)evaluator).getFmeasure() > best ) 
                { 
                    result = (BasicAlignment)((BasicAlignment)a).clone(); 
                    best = ((PRecEvaluator)evaluator).getFmeasure(); 
                } 
            }
            }
        } catch (AlignmentException ex) {
            System.out.println("Matching error!!!");
        }
        catch (NullPointerException ex){
            System.out.println("NULL");
        }
        evaluationInfoTextArea.setText(res);
        matchStatusLabel.setText("Matched");
        matchStatusLabel.setForeground(Color.GREEN);
    }//GEN-LAST:event_matchButtonActionPerformed

    private void matcherComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matcherComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_matcherComboBoxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
      int value=fc.showSaveDialog(null);
      if(value==JFileChooser.APPROVE_OPTION)
      {
      try
      {
      String content=evaluationInfoTextArea.getText();
      File outFile = fc.getSelectedFile();
      BufferedWriter out=new BufferedWriter(new FileWriter(outFile.toString()+".txt"));
      out.write(content);
      out.close();
      
      
      }
      catch(Exception e){}
      }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void mapperTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapperTabbedPaneMouseClicked
        
      // TODO add your handling code here:
       
    }//GEN-LAST:event_mapperTabbedPaneMouseClicked

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formMouseClicked

    private void AlignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlignmentButtonActionPerformed
        // TODO add your handling code here:
        JGraphAdapterFrame f=new JGraphAdapterFrame();
    }//GEN-LAST:event_AlignmentButtonActionPerformed

    private void InputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputButtonActionPerformed
        // TODO add your handling code here:
       
       //jframe2.setVisible(true);
       // addvertex v1=new addvertex();
       
       
  
       
       
       
        
        
    }//GEN-LAST:event_InputButtonActionPerformed

    private void InputButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InputButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_InputButtonMouseClicked

    private void InputButtonComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_InputButtonComponentMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_InputButtonComponentMoved

    private void AddVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddVertexActionPerformed
        // TODO add your handling code here:
        String str = JOptionPane.showInputDialog(null, "Enter name of vertex you want to add");
//        JOptionPane.showInputDialog(rootPane, flag).
      
                if(str!=null&&!str.equals(""))
        {
        g2.addVertex(str);
        vertexList.add(str);
       
      //  if(flag==false)
        positionVertexAt(str,80+x*150,80+y);
        x++;
        if(x>6)
            {
                x=0;
                y+=130;
               // flag=true;
            }
       
        
        revalidate();
        repaint();
        }
        else if(str!=null&&str.equals(""))
        {
               JOptionPane.showMessageDialog(null,"Vertex not entered","Add vertex",JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_AddVertexActionPerformed

    private void AddEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddEdgeActionPerformed
        // TODO add your handling code here:
         MyPanel myPanel=new MyPanel();
       int a=JOptionPane.showConfirmDialog(null, myPanel, 
               "Please Enter source and destination vertices", JOptionPane.OK_CANCEL_OPTION);
       if(a==JOptionPane.OK_OPTION)
       {
       String str1=myPanel.v1.getText();
       String str2=myPanel.v2.getText();
       if(str1==null||str2==null||str1.equals("")||str2.equals(""))
       {
            JOptionPane.showMessageDialog(null,"You haven't entered the vertex name");
       }
       else
       {
       int i=0;
      boolean flagstr1=false;
      boolean flagstr2=false;
      for(i=0;i<vertexList.size();i++)
       {
           if(str1.equals(vertexList.get(i)))
               flagstr1=true;
           if(str2.equals(vertexList.get(i)))
              flagstr2=true;
           if(flagstr1==true&&flagstr2==true)
           { g2.addEdge(str1, str2);
               break;
           }
       }    
      
           if(flagstr1!=true)
           {
                JOptionPane.showMessageDialog(null,"Vertex 1 not found","Vertex not found",JOptionPane.ERROR_MESSAGE);
           }
            if(flagstr2!=true)
           {
                JOptionPane.showMessageDialog(null,"Vertex 2 not found","Vertex not found",JOptionPane.ERROR_MESSAGE);
           }
           
       }
    }
    
       
       
        
        
    }//GEN-LAST:event_AddEdgeActionPerformed

    private void RemoveVertexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveVertexActionPerformed
        // TODO add your handling code here:
        boolean flagRemove=false;
        String removeVertex;
        int i;
        int a=0;
        removeVertex=JOptionPane.showInputDialog(null, "Enter Vertex to be deleted");
        if(removeVertex!=null&&!removeVertex.equals(""))
        {
        for(i=0;i<vertexList.size();i++)
        {
            if(removeVertex.equals(vertexList.get(i)))
            {
                flagRemove=true;
                a=JOptionPane.showConfirmDialog(null,"Are you sure you want to delete the vertex");
             
            }
           if(a==JOptionPane.OK_OPTION)
            {
                vertexList.remove(i);
               g2.removeVertex(removeVertex);
               break;
            }
        } 
           if(flagRemove!=true)
           {
                JOptionPane.showMessageDialog(null,"Vertex not found","Vertex not found",JOptionPane.ERROR_MESSAGE);
           } 
               
        }
        else if(removeVertex!=null&&removeVertex.equals(""))
        {
                JOptionPane.showMessageDialog(null,"Vertex not entered","Vertex not entered",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RemoveVertexActionPerformed

    private void RemoveEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveEdgeActionPerformed
        // TODO add your handling code here:
         MyPanel myPanel=new MyPanel();
       int a=JOptionPane.showConfirmDialog(null, myPanel, 
               "Please Enter source and destination vertices between whom edge is to be deleted", JOptionPane.OK_CANCEL_OPTION);
       String str1=myPanel.v1.getText();
       String str2=myPanel.v2.getText();
       if(a==JOptionPane.OK_OPTION)
       {
      if(str1==null||str2==null||str1.equals("")||str2.equals(""))
       {
            JOptionPane.showMessageDialog(null,"You haven't entered the vertex name");
       }
      else
      {
       int i=0;
       boolean flagstr1=false;
      boolean flagstr2=false;
      boolean existEdge;
       for(i=0;i<vertexList.size();i++)
       {
           if(str1.equals(vertexList.get(i)))
               flagstr1=true;
           if(str2.equals(vertexList.get(i)))
              flagstr2=true;
           if(flagstr1==true&&flagstr2==true)
           {  
               existEdge= g2.containsEdge(str1, str2);
               if(existEdge==true)
                   g2.removeAllEdges(str1, str2);
               else JOptionPane.showMessageDialog(null, "No edge exist!");
                
               break;
           }
       }    
           if(flagstr1!=true)
           {
                JOptionPane.showMessageDialog(null,"Vertex 1 not found","Vertex not found",JOptionPane.ERROR_MESSAGE);
           }
            if(flagstr2!=true)
           {
                JOptionPane.showMessageDialog(null,"Vertex 2 not found","Vertex not found",JOptionPane.ERROR_MESSAGE);
           }
           
      } 
       }
        
    }//GEN-LAST:event_RemoveEdgeActionPerformed
private void positionVertexAt( Object vertex, int x, int y ) {
        DefaultGraphCell cell = m_jgAdapter.getVertexCell( vertex );
        Map              attr = cell.getAttributes(  );
        //Rectangle2D b = GraphConstants.getBounds(attr);
        //int height=(int)b.getHeight();
        //int width=(int)b.getWidth();
        Rectangle2D b=new Rectangle(x, y,70,70);
GraphConstants.setBounds( attr,b );




        Map cellAttr = new HashMap(  );
        cellAttr.put( cell, attr );
        m_jgAdapter.edit(cellAttr, null, null, (UndoableEdit[])null);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OntologyMapperGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OntologyMapperGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OntologyMapperGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OntologyMapperGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
      
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
               OntologyMapperGUI omg=new OntologyMapperGUI();
                
                omg.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddEdge;
    private javax.swing.JButton AddVertex;
    private javax.swing.JButton AlignmentButton;
    private javax.swing.JButton InputButton;
    private javax.swing.JPanel InputVisualizationPanel;
    private javax.swing.JButton MergeButton;
    private javax.swing.JButton RemoveEdge;
    private javax.swing.JButton RemoveVertex;
    private javax.swing.JPanel alignmentPanel;
    private javax.swing.JTextArea alignmentTextArea;
    private javax.swing.JButton browse1Button;
    private javax.swing.JButton browse2Button;
    private javax.swing.JButton browse3Button;
    private javax.swing.JButton createInputVisualizationButton;
    private javax.swing.JTextArea evaluationInfoTextArea;
    private javax.swing.JPanel evaluationPanel;
    private javax.swing.JTextField expectedOutputFileTextField;
    private javax.swing.JLabel file1Label;
    private javax.swing.JTextField file1TextField;
    private javax.swing.JLabel file2Label;
    private javax.swing.JTextField file2TextField;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane mapperTabbedPane;
    private javax.swing.JButton matchButton;
    private javax.swing.JLabel matchStatusLabel;
    private javax.swing.JLabel matchedLabel;
    private javax.swing.JComboBox matcherComboBox;
    private javax.swing.JLabel matcherLabel;
    private javax.swing.JButton saveAlignmentButton;
    private javax.swing.JPanel visualizationPanel;
    // End of variables declaration//GEN-END:variables
}
